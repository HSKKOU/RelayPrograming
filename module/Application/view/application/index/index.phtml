<div id="room_info_side_bar">
  <!-- area for rooms -->
  <div id="rooms_view">test</div>
  <!-- area for members -->
  <?= $this->members_view ?>
</div>
<div id="app-body" class="exist_ui">
  <div id="navbar" class="bb">
    <div id="room_issue" class="wh100">
      <div class="img">Q</div>
      <div class="text"></div>
    </div>
    <div id="menu_btn"></div>
  </div>

  <div id="code_chat_view" class="wh100">
    <!-- area for coded text -->
    <?= $this->code_view ?>

    <div class="separator"></div>

    <!-- area for chat text -->
    <?= $this->chat_view ?>
  </div>

  <!-- area for user input -->
  <?= $this->user_input ?>
</div>

<!-- Login lightbox -->
<?= $this->loginlb ?>

<input id="room_id" type="hidden" value="<?= $this->room_id ?>" />




<?php
$api_user = $this->url('api/default', array('controller' => 'user'));
$api_code = $this->url('api/default', array('controller' => 'code'));
$api_chat = $this->url('api/default', array('controller' => 'chat'));
$api_room = $this->url('api/default', array('controller' => 'room'));
$api_member = $this->url('api/default', array('controller' => 'member'));
$api_roomst = $this->url('api/default', array('controller' => 'roomst'));

$this->inlineScript()->appendScript(
<<<__END__

/* declare members */
var \$signUpDOM = \$("#sign_up"),
    \$signUpForm = \$("#sign_up_form"),
    \$codeViewDOM = \$("#code_view"),
    \$codeRowTmp = \$codeViewDOM.find(".code_row").remove().removeClass("template"),
    \$codeViewField = \$("#code_view_field"),
    \$chatViewDOM = \$("#chat_view"),
    \$chatRowTmp = \$chatViewDOM.find(".chat_row").remove().removeClass("template"),
    \$chatViewField = \$("#chat_view_field"),
    \$membersView = \$("#members_view_field"),
    \$memberRowTmp = \$membersView.find(".member_row").remove().removeClass("template"),
    \$userInputForm = \$("#user_input_form"),
    \$userInput = \$("#user_input_field > input"),
    \$userIco = \$("#user_ico"),
    initWaiter, canPostCode = false, canSign = false,
    codeRowCreator;
/* end declare members */


/* init */
(function main(){
  initialize();
  invalidatePostCode();
  log($.cookie(userIdCN));
  if($.cookie(userIdCN) > 0){
    userId = $.cookie(userIdCN);
    signIn();
    return;
  }
  setLoginEvent();
})();

function initialize(){
  initApis();
  roomId = \$("#room_id").val();
  userIdCN = cookieNameUserId(roomId);
  roomVerCN = cookieNameRoomVer(roomId);
}

function initApis(){
  api_user = "$api_user";
  api_code = "$api_code";
  api_chat = "$api_chat";
  api_room = "$api_room";
  api_member = "$api_member";
  api_roomst = "$api_roomst";
}
/* end init */


/* login */
function getCanSign(){ return canSign; }
function setLoginEvent(){
  \$signUpForm.on("submit", function(_e){
    _e.preventDefault();
    signUp();
    return false;
  });
  canSign = true;
}

function signUp(){
  if(!canSign){ return false; }
  canSign = false;
  var name = \$signUpForm.find('.input_name > input').val(),
      color = \$signUpForm.find('.input_color > input').val();

  var postData = { "type": "signUp", "name": name, "color": color, "room_id": roomId };
  post({"url": api_user, "type": "post", "query": postData,
    "success": function(_data){ succeedSignUp(_data['data']); },
    "fail": function(_data){ failedSignUp(_data['data']); },
    "complete": function(_data){ /* nothing to do. */ }
  });
}

function succeedSignUp(_user){
  log("signUp", _user);
  userId = +_user['id'];
  signIn();
}
function failedSignUp(_data){
  alert("Failed to create or sign up.");
  log(_data);
  canSign = true;
}

function signIn(){
  var postData = { "type": "signIn", "user_id": userId, "room_id": roomId };
  post({"url": api_user, "type": "post", "query": postData,
    "success": function(_data){ succeedSignIn(_data['data']); },
    "fail": function(_data){ failedSignIn(_data['data']); },
    "complete": function(_data){ canSign = true; }
  });
}

function succeedSignIn(_user){
  /* set User Info */
  log("user", _user);
  userId = +_user['id'];
  userName = _user['name'];
  userColor = _user['color'];
  $.cookie(userIdCN, userId, { "path": "/", "expires": 1 });
  /* end set User Info */

  \$signUpForm.off();
  \$signUpDOM.remove();

  setMainEvents();
}
function failedSignIn(_data){ alert("Failed Sign In."); log(_data); }

function signOut(){
  var postData = { "type": "signOut", "user_id": userId };
  post({"url": api_user, "type": "post", "query": postData,
    "success": function(_data){ succeedSignOut(_data['data']); },
    "fail": function(_data){ failedSignOut(_data['data']); },
    "complete": function(_data){ /* nothing to do. */ }
  });
}

function succeedSignOut(_user){ resetCookiesInRoom(roomId); location.reload(); }
function failedSignOut(_data){ alert("Failed Sign Out."); log(_data); }
/* end login */


/* main routine */
function setMainEvents(){
  resetUserInput();
  setUserInfo2UI();

  codeRowCreator = new createCodeRowCreator(\$codeRowTmp);

  initWaiter = new Waiter(function(){
    recievedCodes = setRecievedCodes;
    recievedChatTexts = setRecievedChatTexts;
    recievedMembers = setMemberStatus;
    startHeartBeat();
  }, 4);

  setUserInputEvent();

  getRoomInfo(api_room, roomId, function(_data){
    getTextsInRoom(api_code, roomId, function(_data){ setRecievedCodes(_data); initWaiter.resolve(); });
    getTextsInRoom(api_chat, roomId, function(_data){ setRecievedChatTexts(_data); initWaiter.resolve(); });
    getMemberStatus(function(_data){ setMemberStatus(_data); initWaiter.resolve(); });
    postGetRoomStatus(api_roomst, function(_data){ storeRoomVersion(_data['room_ver']); initWaiter.resolve(); });
  });

  \$userInput.attr("placeholder", ":int a = 1;    (':' 無しなら chat に投稿)");
  setUserInfoLB();
}

function setUserInfoLB(){
  var canClickSignOutBtn = false,
      isShowLB = false;
  \$userIco.on("click", function(){trigUserInfoLB()});
  \$("#signOutBtn").on("click", function(){
    if(!canClickSignOutBtn){ return; }
    canClickSignOutBtn = true;
    signOut();
  });
  canClickSignOutBtn = true;

  var isShowCodeLineNum = true;
  \$("#showLineNumBtn").on("click", function(){
    if(isShowCodeLineNum){
      \$codeViewField.find(".code_row > .number").hide();
      isShowCodeLineNum = false;
    } else {
      \$codeViewField.find(".code_row > .number").show();
      isShowCodeLineNum = true;
    }
  });

  function trigUserInfoLB(){
    var \$userInfoLb = \$("#user_info_lb");
    if(isShowLB){ isShowLB = false; \$userInfoLb.hide(); }
    else{ isShowLB = true; \$userInfoLb.show(); }
  }
}
/* end main routine */


/* code */
function setRecievedCodes(_codes){
  if(_codes.length == 0){ return; }
  for(var i in _codes){
    if(\$codeViewField.find(".code-line-num-"+_codes[i]['line_num'])[0]){ updateCode(_codes[i]); }
    else{ addRecievedCode(_codes[i]); }
  }
  \$codeViewField.animate({"scrollTop": \$(\$codeViewField)[0].scrollHeight}, 'fast');
}
function updateCode(_code){
  \$codeViewField.find(".code-line-num-"+_code['line_num']).find(".code").html(createPrettyCodeHtml(_code['code']));
  prettyPrint();
}
function addRecievedCode(_code){
  codeRowCreator.createCR(_code).appendTo(\$codeViewField);
  prettyPrint();
}
function succeedPostCode(_res){
  log("_res", _res);
  if(!_res['result']){
    alert(_res['data']);
    return;
  }
  resetUserInput();
}
/* end code */


/* chat */
function setRecievedChatTexts(_ctexts){
  if(_ctexts.length == 0) { return ;}
  for(var i in _ctexts){ addRecievedChatText(_ctexts[i]); }
  \$chatViewField.animate({"scrollTop": \$(\$chatViewField)[0].scrollHeight}, 'fast');
}
function addRecievedChatText(_ctext){ createChatRow(_ctext, \$chatRowTmp.clone()).appendTo(\$chatViewField); }
function succeedPostChatText(_res){ resetUserInput(); }
/* end chat */


/* member */
function getMemberStatus(_callback){
  post({"url": api_member+"?room_id="+roomId, "type": "get", "query": {},
    "success": function(_data){ _callback(_data['data']) },
    "fail": function(_data){ /* nothing to do. */ },
    "complete": function(_data){ /* nothing to do. */ }
  });
}

function setMemberStatus(_members){
  \$(".member_row").remove();
  var isExistMyUid = false;
  for(var i in _members['members']){
    createMember(_members['members'][i], _members['turn_user_id'], \$memberRowTmp).appendTo(\$membersView);
    if(+_members['members'][i]['id'] == userId){ isExistMyUid = true; }
  }
  if(!isExistMyUid){ resetCookiesInRoom(roomId); location.reload(); }
  updateMemberTurn(_members['turn_user_id']);
  if(userId == _members['turn_user_id']){ validatePostCode(); }
}

function updateMemberTurn(_turnUid){
  \$membersView.find(".member_row.turn").removeClass("turn");
  \$membersView.find(".member_row.uid"+_turnUid).addClass("turn");
  invalidatePostCode();
  if(userId == _turnUid){ validatePostCode(); }
}
/* end member */


/* user input */
function setUserInputEvent(){
  var canPost = false;
  \$userInputForm.on("submit", function(_e){
    if(!canPost){ return false; }
    canPost = false;
    _e.preventDefault();
    var inputText = \$userInputForm.find('#user_input_field > input').val(),
        postData = { "user_id": userId, "room_id": roomId };

    if(isCodeOrChatText(inputText)){
      if(!canPostCode){ alert("It is not your turn."); return; }
      postData["code"] = encodeSpecialChara(inputText.substr(1));
      postTexts(api_code, postData, succeedPostCode, function(_fRes){}, function(_cRes){
        log("canPost", canPost);
        canPost = true;
      });
    } else {
      if(inputText == ""){ canPost = true; return false; }
      postData["text"] = encodeSpecialChara(inputText);
      postTexts(api_chat, postData, succeedPostChatText, function(_fRes){}, function(_cRes){
        log("canPost", canPost);
        canPost = true;
      });
    }

    return false;
  });
  canPost = true;
}

function validatePostCode(){ canPostCode = true; }
function invalidatePostCode(){ canPostCode = false; }

function resetUserInput(){ \$userInput.val(""); }
function setUserInfo2UI(){ \$userIco.css({"background": userColor}).text(userName); }
/* end user input */

__END__
);
